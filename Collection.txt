arraylist :all wrapper used 
Integer
Float
Character
Short
Byte
Boolean
Long 
Double 
String 

Ans)
import java.util.*;

public class Exc{
    public static void main(String[] args) {
        ArrayList<Integer> al1 = new ArrayList<>();
        al1.add(23);
        System.out.println(al1);
        ArrayList<Float> al2 = new ArrayList<>();
        al2.add(2.3f);
        System.out.println(al2);
        ArrayList<Character> al3 = new ArrayList<>();
        al3.add('e');
        ArrayList<Short> al4 = new ArrayList<>();
        al4.add();
        System.out.println(al4);
        ArrayList<Byte> al5 = new ArrayList<>();
        al5.add();
        System.out.println(al5);
        ArrayList<Boolean> al6 = new ArrayList<>();
        al6.add(true);
        System.out.println(al6);
        ArrayList<Long> al7 = new ArrayList<>();
        al7.add();
        System.out.println(al7);
        ArrayList<Double> al8 = new ArrayList<>();
        al8.add(2.3343);
        ArrayList<String> al9 = new ArrayList<>();
        al9.add("I am string");
        System.out.println(al9);
    }
}

short---Byte---long will give error because they do not support in it as they will represent the element and int will represent there index number.
--------------------------------------------------------------------------------
arraylist :all wrapper used 
Integer
Float
Character
Short
Byte
Boolean
Long 
Double 
String 

print through for loop 

Ans)
import java.util.*;

public class Exc{
    public static void main(String[] args) {
        ArrayList<Integer> al1 = new ArrayList<>();
        al1.add(23);
        al1.add(33);
        for(int i=0; i<al1.size(); i++){
            System.out.println(al1.get(i));
        }
        ArrayList<Float> al2 = new ArrayList<>();
        al2.add(2.3f);
        al2.add(1.3f);
        for(int i=0; i<al2.size(); i++){
            System.out.println(al2.get(i));
        }
        ArrayList<Character> al3 = new ArrayList<>();
        al3.add('e');
        al3.add('p');
        for(int i=0; i<al3.size(); i++){
            System.out.println(al3.get(i));
        }
        ArrayList<Short> al4 = new ArrayList<>();
        al4.add();
        ArrayList<Byte> al5 = new ArrayList<>();
        al5.add();
        ArrayList<Boolean> al6 = new ArrayList<>();
        al6.add(true);
        al6.add(false);
        for(int i=0; i<al6.size(); i++){
            System.out.println(al6.get(i));
        }
        ArrayList<Long> al7 = new ArrayList<>();
        al7.add();
        ArrayList<Double> al8 = new ArrayList<>();
        al8.add(2.3343);
        al8.add(1.3343);
        for(int i=0; i<al8.size(); i++){
            System.out.println(al8.get(i));
        }
        ArrayList<String> al9 = new ArrayList<>();
        al9.add("I am string");
        al9.add("I am not string");
        for(int i=0; i<al9.size(); i++){
            System.out.println(al9.get(i));
        }
    }
}

short---Byte---long will give error because they do not support in it as they will represent the element and int will represent there index number.

----------------------------------------------------------------------
string :
CURD 

Ans)
import java.util.*;

public class Exc{
    public static void main(String[] args) {
        ArrayList<String> al9 = new ArrayList<>();
        al9.add("I am string");
        al9.add("I am not string");
        al9.add("hello");
        al9.add("world");
        System.out.println(al9);
        al9.add(0, "new");
        System.out.println(al9);
        al9.remove(1);
        System.out.println(al9);
        al9.clear();
        System.out.println(al9);
    }
}

-------------------
INTEGER :CURD OPERATION 

Ans)
import java.util.*;

public class Exc{
    public static void main(String[] args) {
        ArrayList<Integer> al1 = new ArrayList<>();
        al1.add(23);
        al1.add(33);
        al1.add(43);
        al1.add(56);
        al1.add(21);
        System.out.println(al1);
        al1.add(0,21);
        System.out.println(al1);
        al1.remove(2);
        System.out.println(al1);
        al1.clear();
        System.out.println(al1);
    }
}

----------------------------------------------------
what is diffrence between arraylist and array ? 
Ans) It is like an array, but there is no size limit
The ArrayList in Java can have the duplicate elements also. It implements the List interface
Java ArrayList class can contain duplicate elements.
Java ArrayList class maintains insertion order.
Java ArrayList class is non synchronized.
Java ArrayList allows random access because the array works on an index basis.
We can not create an array list of the primitive types, such as int, float, char, etc. It is required to use the required wrapper class in such cases.