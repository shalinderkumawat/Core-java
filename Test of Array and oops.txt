1)
1 2 3 4 5 6 7
1 2 3 4 5 6
1 2 3 4 5
1 2 3 4
1 2 3
1 2
1
1 2
1 2 3
1 2 3 4
1 2 3 4 5
1 2 3 4 5 6
1 2 3 4 5 6 7


Ans)
import java.util.Scanner;

public class Test{
    public static void main(String[] args) {
        int n = 7;
        for(int i=1; i<=n; i++){
            for(int j=1; j<=n-i+1; j++){
                System.out.print(j+" ");
            }
            System.out.println();
        }
        for(int i=1; i<=n; i++){
            for(int j=1; j<=i; j++){
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}

-------------------------------------------------------

2)
1
2 1
3 2 1
4 3 2 1
5 4 3 2 1
6 5 4 3 2 1
7 6 5 4 3 2 1


Ans)
import java.util.Scanner;

public class Test{
    public static void main(String[] args) {
        int n = 7;
        for(int i=1; i<=n; i++){
            for(int j=i; j>=1; j--){
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}

----------------------------------------------------------

3)
Create a Java program that simulates a game of Rock, Paper, Scissors between two players. Take the choices as input and determine the winner using "if-else if" statements. If it's a tie, print "Tie.

Ans)
import java.util.Scanner;

public class Test{
    static void game(String play1,String play2){
        if(play1.equals("Rock") && play2.equals("Paper")){
            System.out.println("Player 2 with paper is winner");
        }
        else if(play1.equals("Rock") && play2.equals("Scissors")){
            System.out.println("Player 1 with Rock is winner");
        }
        else if(play1.equals("Rock") && play2.equals("Rock")){
            System.out.println("Tie");
        }
        else if(play1.equals("Paper") && play2.equals("Rock")){
            System.out.println("Player 1 with paper is winner");
        }
        else if(play1.equals("Paper") && play2.equals("Scissors")){
            System.out.println("Player 2 with Scissors is winner");
        }
        else if(play1.equals("Paper") && play2.equals("Paper")){
            System.out.println("Tie");
        }
        else if(play1.equals("Scissors") && play2.equals("Paper")){
            System.out.println("Player 1 with Scissors is winner");
        }
        else if(play1.equals("Scissors") && play2.equals("Rock")){
            System.out.println("Player 2 with Rock is winner");
        }
        else if(play1.equals("Scissors") && play2.equals("Scissors")){
            System.out.println("Tie");
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the choice for first player");
        String player1 = sc.nextLine();
        System.out.println("Enter the choice for second player");
        String player2 = sc.nextLine();
        game(player1, player2);
    }
}

----------------------------------------------------------

4)
Create a Java program that calculates and prints the sum of the first 100 prime numbers using a for loop.

Ans)
import java.util.Scanner;

public class Test{
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the starting point");
        int a = sc.nextInt();
        System.out.println("Enter the ending point");
        int b = sc.nextInt();
        int sum = 0;
        for(int i=a; i<=b; i++){
            int count = 0;
            for(int j=i; j>=1; j--){
                if(i%j==0){
                    count++;
                }
            }
            if(count==2){
                sum += i;
            }
        }
        System.out.println("The sum of 100 primes "+ sum);
    }
}

------------------------------------------------------


5)
Create a program to find and print the Armstrong numbers between 1 and 1000 using a for loop.

Ans)
import java.util.Scanner;

public class Test{
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the starting point");
        int a = sc.nextInt();
        System.out.println("Enter the ending point");
        int b = sc.nextInt();
        for(int i=a; i<=b; i++){
            int temp = i;
            int sum = 0;
            int rem;
            while(temp>0){
                rem = temp%10;
                sum = sum+rem*rem*rem;
                temp = temp/10;
            }
            if(i==sum){
                System.out.println(i+" is an Armstrong Number");
            }
        }
    }
}

-----------------------------------------------------------

6)
Create a method to remove duplicates from an unsorted array without using extra space.

Ans)
import java.util.Arrays;
import java.util.Scanner;

public class Test{
    static void remove(int a[]){
        for(int i=0; i<a.length; i++){
            int count = 0;
            while(i<a.length-1 && a[i]==a[i+1]){
                count++;
                i++;
            }
            if(count>=1){
                System.out.print(a[i]+" ");
            }
            if(count==0){
                System.out.print(a[i]+" ");
            }
            else{
                continue;
            }
        }
    }
    public static void main(String[] args) {
        int a[] = {0,1,1,2,2,3,3,3,4,5,6};
        remove(a);
    }
}

---------------------------------------------------------

7)
Create a class hierarchy for a game with classes like Player, Enemy, and Item, and implement the logic for player interactions and scoring.


8)
Create an interface Device with a method turnOn(). Implement this interface in a class Television.

Ans)
import java.util.Arrays;
import java.util.Scanner;
interface Drive{
    void turnOn();
}
class Television implements Drive{
    public void turnOn(){
        System.out.println("Turning on the TV");
    }
}
public class Test{
    
    public static void main(String[] args) {
        Television k = new Television();
        k.toString();
    }
}

-------------------------------------------------------------

9)
Create a program that reads a file and calculates the average of numbers in it. Handle NumberFormatException if a non-numeric value is encountered.

10)Design a Java program to calculate the income tax for an individual based on their annual income. The program should apply different tax rates to different income ranges as defined by the tax laws. The tax rates should be applied progressively, with higher income levels incurring a higher tax rate. The program should prompt the user to input their income, and then it should determine the tax owed based on the following income ranges and associated tax rates:
Income up to $50,000: 10% tax
Income from $50,001 to $100,000: 20% tax
Income over $100,000: 30% tax